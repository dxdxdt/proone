/**
 * \brief Convert the enum value to a string
 * \return The pointer to the string from the read-only static string pool.
 * \retval NULL if \p x is out of bounds and \c errno set to \c EINVAL
 */
/**
 * \brief Convert the enum value to a string, which can be converted back to the
 *	original enum value.
 * \return The pointer to the string from the read-only static string pool.
 * \retval NULL if \p x is out of bounds and \c errno set to \c EINVAL
 */

/**
 * \brief Initialisation function
 * \see [/doc/impl.md#Resource Allocation](/doc/impl.md#resource_allocation)
 */
/**
 * \brief Deinitialisation function
 * \see [/doc/impl.md#Resource Allocation](/doc/impl.md#resource_allocation)
 */


/**
 * \brief The equality operator
 * \retval true if the contents of both \p a and \p b are identical
 * \retval false otherwise
 */
/**
 * \brief The comparison operator
 * \returns negative value if \p a is less than \p b
 * \returns positive value if \p a is greater than \p b
 * \retval 0 if \p a and \p b are identical
 */
/**
 * \brief The deep copy operator of the
 * \retval true if the contents of \p src have been successfully copied into
 * 	\p dst
 * \retval false otherwise and \c errno set
 */
/**
 * \brief Allocate variable-length members of the
 * \param x The pointer to the object
 * \param x The byte length required for the
 * \return true if allocation was successful
 * \return false on failure and \c errno set to \c ENOMEM
 * \see [/doc/impl.md#Resource Allocation](/doc/impl.md#resource_allocation)
 */
/**
 * \brief Deep copy operator
 *
 * \param src The source object
 * \param dst The destination object. The original contents are be freed
 * \return true on successful operation
 * \return false on failure and \c errno set to \c ENOMEM
 */
/**
 * \brief Swap operator
 */
/**
 * \brief Move opeator. Moves the contents of \p a into \p b The original
 * contents of \p b are freed
 */


/**
 * \brief The serialisation function for the
 * \param mem The output buffer
 * \param mem_len The byte length of the buffer available
 * \param actual The actual number of bytes required or written
 * \param in The pointer to the object
 * \retval PRNE_HTBT_SER_RC_OK on success
 * \retval PRNE_HTBT_SER_RC_MORE_BUF if more buffer is required for output
 * \retval PRNE_HTBT_SER_RC_ERRNO if an error occurred during the process
 * \retval PRNE_HTBT_SER_RC_FMT_ERR if a format error encountered
 */
/**
 * \brief The deserialisation function for the
 * \param data The input binary data
 * \param len The byte length of the input binary data
 * \param actual The actual number of bytes processed or required
 * \param out The pointer to the object for output
 * \retval PRNE_HTBT_SER_RC_OK on success
 * \retval PRNE_HTBT_SER_RC_MORE_BUF if more input data is required for parsing
 * \retval PRNE_HTBT_SER_RC_ERRNO if an error occurred during the process
 * \retval PRNE_HTBT_SER_RC_FMT_ERR if a format error encountered
 */
